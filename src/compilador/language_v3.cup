package compilador;

import java_cup.runtime.*;

/* Terminals */
terminal Token SUM, MINUS, MULTIPLICATION, DIVISION;
terminal Token ID, COMMA;
terminal Token OPEN, CLOSE;
terminal Token GREATERTHAN, LESSTHAN, EQUAL;
terminal Token DEF, IF, ELSE, THEN;
terminal Token ENDSTMT;
terminal Token INTEGER;

/* Nonterminals */
non terminal PClass P;
non terminal IClass I;
non terminal DClass D;
non terminal ArgsClass ARGS;
non terminal SeqClass SEQ;
non terminal EClass E;
non terminal OPRELClass OPREL;
non terminal OPARITClass OPARIT;

/* Precedence */
precedence left SUM, MINUS;
precedence left MULTIPLICATION, DIVISION;
precedence left GREATERTHAN, LESSTHAN, EQUAL;
precedence left IF, ELSE, THEN;
precedence left OPEN, CLOSE;

/* Grammar */
start with P;

P ::= ID:id EQUAL:equal INTEGER:integer ENDSTMT:endstmt P:p
	{: 

	  RESULT = new PClass(id, equal, integer, endstmt, p);

	 :}		
    | I:i
    {: 

	  RESULT = new PClass(i);

	 :}	
    ;
	
I ::= D:d I:i
	{:
		
	 RESULT = new IClass(d, i);

	:}
	
 | D:d
 	{:

	RESULT = new IClass(d);

	:}
 ;

D ::= DEF:def ID:id OPEN:open ARGS:args CLOSE:close EQUAL:equal E:e ENDSTMT:endstmt
	{:

	RESULT = new DClass(def, id, open, args, close, equal, e, endstmt);

	:};

ARGS ::= ID:id COMMA:comma ARGS:args

	{:

	RESULT = new ArgsClass(id, comma, args);

	:}
	
	| ID:id
	
	{:
	RESULT = new ArgsClass(id);

	:};

SEQ ::= E:e 

	{:

	RESULT = new SeqClass(e);
 
	:}
	
	| SEQ:seq COMMA:comma E:e
	
	{:

	RESULT = new SeqClass(seq, comma, e);	

	:}
	;

E ::= INTEGER:integer
	{: 
	
	  RESULT = new EClass(integer);
	   
	 :}
	| ID:id
	{: 
	
	  RESULT = new EClass(id);
	   
	 :}
	| E:e1 OPARIT:oparit E:e2
	{: 
	
	  RESULT = new EClass(e1, oparit, e2);
	   
	 :}
	| IF:_if E:e1 OPREL:oprel E:e2 THEN:then E:e3 ELSE:_else E:e4
	{: 
	
	  RESULT = new EClass(_if, e1, oprel, e2, then, e3, _else, e4);
	   
	 :}
    | ID:id OPEN:open SEQ:seq CLOSE:close
    {: 
	
	  RESULT = new EClass(id, open, seq, close);
	   
	 :};

OPARIT ::= SUM:sum

	{:

	RESULT = new OPARITClass(sum);

	:}
| MINUS | MULTIPLICATION | DIVISION;

OPREL ::= EQUAL:equal

	{:

	RESULT = new OPRELClass(equal);

	:}

| GREATERTHAN | LESSTHAN;
















