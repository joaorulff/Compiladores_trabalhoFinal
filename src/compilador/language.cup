package compilador;

import java_cup.runtime.*;

/* Terminals */
terminal Token SUM, MINUS, MULTIPLICATION, DIVISION;
terminal Token ID, COMMA;
terminal Token OPEN, CLOSE;
terminal Token GREATERTHAN, LESSTHAN, EQUAL;
terminal Token DEF, IF, ELSE, THEN;
terminal Token ENDSTMT;
terminal Token INTEGER;

/* Nonterminals */
non terminal PClass P;
non terminal IClass I;
non terminal DClass D;
non terminal ArgsClass ARGS;
non terminal SeqClass SEQ;
non terminal EClass E;
non terminal OPRELClass OPREL;
non terminal OPARITClass OPARIT;

/* Precedence */
precedence left SUM, MINUS;
precedence left MULTIPLICATION, DIVISION;
precedence left GREATERTHAN, LESSTHAN, EQUAL;
precedence left IF, ELSE, THEN;
precedence left OPEN, CLOSE;

/* Grammar */
start with P;

P ::= ID:id EQUAL INTEGER:integer ENDSTMT P:p 				{: RESULT = new PClassAssign(id, integer, p); :}		
    | I:i 													{: RESULT = new PClassDef(i); :};
	
I ::= D:d I:i 												{: RESULT = new IClassCompound(d, i); :}
 	| D:d 													{: RESULT = new IClassSingle(d); :};

D ::= DEF ID:id OPEN ARGS:args CLOSE EQUAL E:e ENDSTMT 		{: RESULT = new DClassInstance(id, args, e); :};

ARGS ::= ID:id COMMA ARGS:args 								{: RESULT = new ArgsClassCompound(id, args); :}
	| ID:id													{: RESULT = new ArgsClassSingle(id); :};

SEQ ::= E:e 												{: RESULT = new SeqClass(e); :}
	| SEQ:seq COMMA E:e										{: RESULT = new SeqClass(seq, e); :};

E ::= INTEGER:integer										{: RESULT = new EClassSingleInt(integer); :}
	| ID:id													{: RESULT = new EClassSingleID(id):}
	| E:e1 OPARIT:oparit E:e2								{: RESULT = new EClassOparit(e1, oparit, e2); :}
	| IF E:e1 OPREL:oprel E:e2 THEN E:e3 ELSE E:e4			{: RESULT = new EClassOprel(e1, oprel, e2, e3, e4); :}
    | ID:id OPEN SEQ:seq CLOSE								{: RESULT = new EClassFunc(id, seq); :};

OPARIT ::= SUM:sum											{: RESULT = new OPARITClass(sum); :}
	| MINUS:minus 											{: RESULT = new OPARITClass(minus); :}
	| MULTIPLICATION:mult									{: RESULT = new OPARITClass(mult); :}
	| DIVISION:div											{: RESULT = new OPARITClass(div); :};

OPREL ::= EQUAL:equal										{: RESULT = new OPRELClass(equal); :}
	| GREATERTHAN:gt 										{: RESULT = new OPRELClass(gt); :}
	| LESSTHAN:lt											{: RESULT = new OPRELClass(lt); :};
