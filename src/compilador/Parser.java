
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 30 20:11:46 BRT 2017
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 30 20:11:46 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\012" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\012\000\002\007\005\000\002\007\006\000\002\013" +
    "\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\006\010\004\022\006\001\002\000\004\014" +
    "\052\001\002\000\004\002\uffff\001\002\000\004\010\014" +
    "\001\002\000\004\002\013\001\002\000\006\002\ufffd\015" +
    "\011\001\002\000\004\022\006\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\001\001\002\000\004\012\015\001" +
    "\002\000\004\010\016\001\002\000\006\013\ufffa\016\050" +
    "\001\002\000\004\013\020\001\002\000\004\014\021\001" +
    "\002\000\010\010\022\011\023\023\025\001\002\000\022" +
    "\004\ufff6\012\042\013\ufff6\015\ufff6\016\ufff6\021\ufff6\024" +
    "\ufff6\025\ufff6\001\002\000\020\004\ufff7\013\ufff7\015\ufff7" +
    "\016\ufff7\021\ufff7\024\ufff7\025\ufff7\001\002\000\006\004" +
    "\031\015\041\001\002\000\010\010\022\011\023\023\025" +
    "\001\002\000\006\004\031\021\030\001\002\000\010\010" +
    "\022\011\023\023\025\001\002\000\010\010\ufff1\011\ufff1" +
    "\023\ufff1\001\002\000\010\010\ufff2\011\ufff2\023\ufff2\001" +
    "\002\000\010\010\022\011\023\023\025\001\002\000\020" +
    "\004\031\013\ufff4\015\ufff4\016\ufff4\021\ufff4\024\ufff4\025" +
    "\ufff4\001\002\000\006\004\031\025\035\001\002\000\010" +
    "\010\022\011\023\023\025\001\002\000\006\004\031\024" +
    "\037\001\002\000\010\010\022\011\023\023\025\001\002" +
    "\000\020\004\031\013\ufff5\015\ufff5\016\ufff5\021\ufff5\024" +
    "\ufff5\025\ufff5\001\002\000\006\002\ufffc\015\ufffc\001\002" +
    "\000\010\010\022\011\023\023\025\001\002\000\010\004" +
    "\031\013\ufff9\016\ufff9\001\002\000\006\013\046\016\045" +
    "\001\002\000\010\010\022\011\023\023\025\001\002\000" +
    "\020\004\ufff3\013\ufff3\015\ufff3\016\ufff3\021\ufff3\024\ufff3" +
    "\025\ufff3\001\002\000\010\004\031\013\ufff8\016\ufff8\001" +
    "\002\000\004\010\016\001\002\000\004\013\ufffb\001\002" +
    "\000\004\011\053\001\002\000\004\015\054\001\002\000" +
    "\006\010\004\022\006\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\010\002\006\003\004\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\011\004\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\031\001\001\000" +
    "\004\007\025\001\001\000\006\012\026\013\031\001\001" +
    "\000\004\007\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\032\001\001\000\004\013\031\001\001" +
    "\000\004\013\031\001\001\000\004\007\035\001\001\000" +
    "\004\013\031\001\001\000\004\007\037\001\001\000\004" +
    "\013\031\001\001\000\002\001\001\000\006\006\043\007" +
    "\042\001\001\000\004\013\031\001\001\000\002\001\001" +
    "\000\004\007\046\001\001\000\002\001\001\000\004\013" +
    "\031\001\001\000\004\005\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\054\003" +
    "\004\004\007\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Funções chamadas em erros ///////////////////////////////////////////////////////////////////////////
    public void syntax_error(Symbol s){ 
        System.out.println("\nOcorreu um erro na linha " + (s.right) +", coluna "+s.left+ ". Identificador "
        +s.value + " não reconhecido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("\nOcorreu um erro na linha " + (s.right)+ ", coluna "+s.left+". Identificador " +
        s.value + " não reconhecido.");
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPREL ::= EQUALITY 
            {
              Object RESULT =null;
		
		System.out.println("OPARIT ::= SUM");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPARIT ::= SUM 
            {
              Object RESULT =null;
		
		System.out.println("OPARIT ::= SUM");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPARIT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= ID OPEN SEQ CLOSE 
            {
              Object RESULT =null;
		
		System.out.println("E ::= ID OPEN SEQ CLOSE");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= E OPARIT E 
            {
              Object RESULT =null;
		
		System.out.println("E ::= E OPARIT E");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= IF E OPREL E THEN E ELSE E 
            {
              Object RESULT =null;
		
		System.out.println("E ::= IF E OPREL E THEN E ELSE E");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= ID 
            {
              Object RESULT =null;
		
		System.out.println("E ::= ID");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= INTEGER 
            {
              Object RESULT =null;
		
		System.out.println("E ::= INTEGER");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SEQ ::= SEQ COMMA E 
            {
              Object RESULT =null;
		
		System.out.println("SEQ COMMA E");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SEQ ::= E 
            {
              Object RESULT =null;
		
		System.out.println("SEQ ::= E");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS ::= ID 
            {
              Object RESULT =null;
		
		System.out.println("ARGS ::= ID");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARGS ::= ID COMMA ARGS 
            {
              Object RESULT =null;
		
		System.out.println("ARGS ::= ID COMMA ARGS");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= DEF ID OPEN ARGS CLOSE EQUAL E ENDSTMT 
            {
              Object RESULT =null;
		
		System.out.println("D ::= DEF ID OPEN ARGS CLOSE EQUAL E ENDSTMT");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // I ::= D 
            {
              Object RESULT =null;
		
		System.out.println("I ::= D");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // I ::= D ENDSTMT I 
            {
              Object RESULT =null;
		
		System.out.println("I ::= D ENDSTMT I");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= I 
            {
              Object RESULT =null;
		
		System.out.println("P ::= I");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= ID EQUAL INTEGER ENDSTMT P 
            {
              Object RESULT =null;
		
		System.out.println("P ::= ID EQUAL INTEGER ENDSTMT P");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

