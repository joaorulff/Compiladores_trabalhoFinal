
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 30 22:24:20 BRT 2017
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 30 22:24:20 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\012" +
    "\000\002\005\004\000\002\020\004\000\002\020\002\000" +
    "\002\021\005\000\002\021\002\000\002\006\004\000\002" +
    "\007\003\000\002\007\004\000\002\007\012\000\002\007" +
    "\004\000\002\010\006\000\002\010\002\000\002\011\005" +
    "\000\002\011\002\000\002\022\003\000\002\022\003\000" +
    "\002\013\004\000\002\014\005\000\002\014\002\000\002" +
    "\023\003\000\002\023\003\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\006\010\004\022\006\001\002\000\004\014" +
    "\075\001\002\000\004\002\uffff\001\002\000\004\010\014" +
    "\001\002\000\004\002\013\001\002\000\006\002\ufffd\015" +
    "\011\001\002\000\004\022\006\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\001\001\002\000\004\012\015\001" +
    "\002\000\004\010\016\001\002\000\006\013\ufff9\016\072" +
    "\001\002\000\004\013\020\001\002\000\004\014\021\001" +
    "\002\000\012\010\023\011\022\012\027\023\030\001\002" +
    "\000\022\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\024\ufff5\025\ufff5\001\002\000\024\012\062\013\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\024\ufff0\025" +
    "\ufff0\001\002\000\026\004\054\005\056\013\uffee\015\uffee" +
    "\016\uffee\017\uffee\020\uffee\021\uffee\024\uffee\025\uffee\001" +
    "\002\000\032\004\uffe9\005\uffe9\006\047\007\050\013\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\024\uffe9\025" +
    "\uffe9\001\002\000\004\015\045\001\002\000\012\010\023" +
    "\011\022\012\027\023\030\001\002\000\012\010\023\011" +
    "\022\012\027\023\030\001\002\000\010\017\035\020\034" +
    "\021\033\001\002\000\012\010\023\011\022\012\027\023" +
    "\030\001\002\000\012\010\uffe5\011\uffe5\012\uffe5\023\uffe5" +
    "\001\002\000\012\010\uffe3\011\uffe3\012\uffe3\023\uffe3\001" +
    "\002\000\012\010\uffe4\011\uffe4\012\uffe4\023\uffe4\001\002" +
    "\000\004\025\037\001\002\000\012\010\023\011\022\012" +
    "\027\023\030\001\002\000\004\024\041\001\002\000\012" +
    "\010\023\011\022\012\027\023\030\001\002\000\022\013" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\024\ufff3" +
    "\025\ufff3\001\002\000\004\013\044\001\002\000\032\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\013\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\021\uffe6\024\uffe6\025\uffe6\001\002\000" +
    "\006\002\ufffc\015\ufffc\001\002\000\004\012\027\001\002" +
    "\000\004\012\uffe8\001\002\000\004\012\uffe7\001\002\000" +
    "\026\004\uffeb\005\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\024\uffeb\025\uffeb\001\002\000\032\004" +
    "\uffe9\005\uffe9\006\047\007\050\013\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\024\uffe9\025\uffe9\001\002\000" +
    "\026\004\uffea\005\uffea\013\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\024\uffea\025\uffea\001\002\000\004\012" +
    "\uffed\001\002\000\004\012\027\001\002\000\004\012\uffec" +
    "\001\002\000\022\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\024\ufff2\025\ufff2\001\002\000\026\004\054" +
    "\005\056\013\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\024\uffee\025\uffee\001\002\000\022\013\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\024\uffef\025\uffef\001" +
    "\002\000\012\010\023\011\022\012\027\023\030\001\002" +
    "\000\022\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\024\ufff4\025\ufff4\001\002\000\006\013\ufff7\016\065" +
    "\001\002\000\012\010\023\011\022\012\027\023\030\001" +
    "\002\000\004\013\067\001\002\000\022\013\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\024\ufff1\025\ufff1\001" +
    "\002\000\006\013\ufff7\016\065\001\002\000\004\013\ufff8" +
    "\001\002\000\004\010\016\001\002\000\004\013\ufffb\001" +
    "\002\000\004\013\ufffa\001\002\000\004\011\076\001\002" +
    "\000\004\015\077\001\002\000\006\010\004\022\006\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\010\002\006\003\004\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\011\004\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\016\001\001\000\004\020\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\025\013\023" +
    "\015\024\001\001\000\002\001\001\000\004\010\062\001" +
    "\001\000\006\011\056\022\054\001\001\000\006\014\050" +
    "\023\045\001\001\000\002\001\001\000\010\007\042\013" +
    "\023\015\024\001\001\000\010\007\030\013\023\015\024" +
    "\001\001\000\004\016\031\001\001\000\010\007\035\013" +
    "\023\015\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\037\013" +
    "\023\015\024\001\001\000\002\001\001\000\010\007\041" +
    "\013\023\015\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\052\023\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\057\015\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\060\022\054" +
    "\001\001\000\002\001\001\000\010\007\063\013\023\015" +
    "\024\001\001\000\002\001\001\000\004\021\065\001\001" +
    "\000\010\007\067\013\023\015\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\070\001\001\000\002" +
    "\001\001\000\004\005\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\077\003\004\004\007\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Funções chamadas em erros ///////////////////////////////////////////////////////////////////////////
    public void syntax_error(Symbol s){ 
        System.out.println("\nOcorreu um erro na linha " + (s.right) +", coluna "+s.left+ ". Identificador "
        +s.value + " não reconhecido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("\nOcorreu um erro na linha " + (s.right)+ ", coluna "+s.left+". Identificador " +
        s.value + " não reconhecido.");
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPREL ::= LESSTHAN 
            {
              Object RESULT =null;
		
		System.out.println("OPREL ::= LESSTHAN");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPREL ::= GREATERTHAN 
            {
              Object RESULT =null;
		
		System.out.println("OPREL ::= GREATERTHAN");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPREL ::= EQUALITY 
            {
              Object RESULT =null;
		
		System.out.println("OPREL ::= EQUALITY");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPREL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F ::= OPEN E CLOSE 
            {
              Object RESULT =null;
		
		System.out.println("F ::= OPEN E CLOSE");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MULTOP ::= DIVISION 
            {
              Object RESULT =null;
		
		System.out.println("MULTOP ::= DIVISION");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTOP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MULTOP ::= MULTIPLICATION 
            {
              Object RESULT =null;
		
		System.out.println("MULTOP ::= MULTIPLICATION");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MULTOP",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T2 ::= 
            {
              Object RESULT =null;
		
		System.out.println("T ::= &");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T2 ::= MULTOP F T2 
            {
              Object RESULT =null;
		
		System.out.println("T2 ::= MULTOP F T2");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T2",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T ::= F T2 
            {
              Object RESULT =null;
		
		System.out.println("T ::= F T2");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ADDOP ::= MINUS 
            {
              Object RESULT =null;
		
		System.out.println("ADDOP ::= MINUS");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDOP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ADDOP ::= SUM 
            {
              Object RESULT =null;
		
		System.out.println("ADDOP ::= SUM");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDOP",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // E3 ::= 
            {
              Object RESULT =null;
		
		System.out.println("E3 ::= &");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E3",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // E3 ::= ADDOP T E3 
            {
              Object RESULT =null;
		
		System.out.println("E3 ::= ADDOP T E3");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E3",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // E2 ::= 
            {
              Object RESULT =null;
		
		System.out.println("E ::= &");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E2 ::= OPEN E SEQ2 CLOSE 
            {
              Object RESULT =null;
		
		System.out.println("E2 ::= OPEN E SEQ2 CLOSE");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E2",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= T E3 
            {
              Object RESULT =null;
		
		System.out.println("E ::= T E3");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= IF E OPREL E THEN E ELSE E 
            {
              Object RESULT =null;
		
		System.out.println("E ::= IF E OPREL E THEN E ELSE E");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= ID E2 
            {
              Object RESULT =null;
		
		System.out.println("E ::= ID E2");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= INTEGER 
            {
              Object RESULT =null;
		
		System.out.println("E ::= INTEGER");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SEQ ::= E SEQ2 
            {
              Object RESULT =null;
		
		System.out.println("SEQ ::= E");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SEQ2 ::= 
            {
              Object RESULT =null;
		
		System.out.println("SEQ2 ::= &");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ2",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SEQ2 ::= COMMA E SEQ2 
            {
              Object RESULT =null;
		
		System.out.println("SEQ2 ::= COMMA E SEQ2");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SEQ2",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARGS2 ::= 
            {
              Object RESULT =null;
		
		System.out.println("ARGS2 ::= &");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARGS2 ::= COMMA ARGS 
            {
              Object RESULT =null;
		
		System.out.println("ARGS2 ::= COMMA ARGS");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARGS ::= ID ARGS2 
            {
              Object RESULT =null;
		
		System.out.println("ARGS ::= ID ARGS2");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // D ::= DEF ID OPEN ARGS CLOSE EQUAL E ENDSTMT 
            {
              Object RESULT =null;
		
		System.out.println("D ::= DEF ID OPEN ARGS CLOSE EQUAL E ENDSTMT");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // I ::= D 
            {
              Object RESULT =null;
		
		System.out.println("I ::= D");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // I ::= D ENDSTMT I 
            {
              Object RESULT =null;
		
		System.out.println("I ::= D ENDSTMT I");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= I 
            {
              Object RESULT =null;
		
		System.out.println("P ::= I");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // P ::= ID EQUAL INTEGER ENDSTMT P 
            {
              Object RESULT =null;
		
		System.out.println("P ::= ID EQUAL INTEGER ENDSTMT P");
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= P EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

